package com.acmeplex.service;

import com.acmeplex.model.RegisteredUser;
import com.acmeplex.repository.RegisteredUserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class RegisteredUserService {

    @Autowired
    private RegisteredUserRepository registeredUserRepository;

    /**
     * Get all registered users.
     *
     * @return List of RegisteredUser
     */
    public List<RegisteredUser> getAllRegisteredUsers() {
        return registeredUserRepository.findAll();
    }

    /**
     * Get a registered user by ID.
     *
     * @param userID the ID of the registered user
     * @return RegisteredUser or throws exception if not found
     */
    public RegisteredUser getRegisteredUserById(int userID) {
        return registeredUserRepository.findById(userID)
                .orElseThrow(() -> new RuntimeException("Registered User not found with ID: " + userID));
    }

    /**
     * Save or update a registered user.
     *
     * @param user the RegisteredUser object
     * @return the saved or updated RegisteredUser
     */
    public RegisteredUser saveRegisteredUser(RegisteredUser user) {
        return registeredUserRepository.save(user);
    }

    /**
     * Delete a registered user by ID.
     *
     * @param userID the ID of the registered user
     */
    public void deleteRegisteredUser(int userID) {
        if (!registeredUserRepository.existsById(userID)) {
            throw new RuntimeException("User with ID: " + userID + " does not exist.");
        }
        registeredUserRepository.deleteById(userID);
    }

    /**
     * Find registered users by email.
     *
     * @param email the email of the registered user
     * @return List of RegisteredUser with matching email
     */
    public List<RegisteredUser> findByEmail(String email) {
        return registeredUserRepository.findByEmail(email);
    }

    /**
     * Update an existing registered user.
     *
     * @param userID the ID of the registered user to update
     * @param updatedUser the updated RegisteredUser object
     * @return the updated RegisteredUser
     */
    public RegisteredUser updateRegisteredUser(int userID, RegisteredUser updatedUser) {
        RegisteredUser existingUser = getRegisteredUserById(userID);

        // Update fields
        existingUser.setEmail(updatedUser.getEmail());
        existingUser.setPassword(updatedUser.getPassword());
        existingUser.setFirstName(updatedUser.getFirstName());
        existingUser.setLastName(updatedUser.getLastName());
        existingUser.setAddress(updatedUser.getAddress());
        existingUser.setCardDetail(updatedUser.getCardDetail());
        existingUser.setAnnualFeePaid(updatedUser.isAnnualFeePaid());

        return registeredUserRepository.save(existingUser);
    }

    /**
     * Get all registered users who have paid the annual fee.
     *
     * @return List of RegisteredUser who have paid the annual fee
     */
    public List<RegisteredUser> getUsersWithAnnualFeePaid() {
        return registeredUserRepository.findByAnnualFeePaid(true);
    }
}
